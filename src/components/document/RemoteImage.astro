---
// wrapper around <img> using 11ty image to generate local files and formats from remote
// @ts-expect-error - no types for 11ty image
import EleventyImage from "@11ty/eleventy-img";

interface Props {
    src: string;
    alt: string;
    width?: number;
    loading?: "lazy" | "eager";
    aspectRatio?: Record<number, number>; // width / height
}

const { src, alt, width = 900, loading = "lazy", aspectRatio } = Astro.props;

const imageMetadata = await EleventyImage(src, {
    widths: [width],
    formats: ["webp"],
    outputDir: "./dist/img-opt",
    urlPath: "/img-opt/",
    transform: (sharp: any) => {
        if (aspectRatio) {
            const dec = aspectRatio[0] / aspectRatio[1];
            sharp.resize(width, Math.round(width / dec));
        }
    },
    // dryRun: true,
});
// console.log(imageMetadata);
const image = imageMetadata.webp[0];
---

<img
    alt={alt}
    decoding={loading == "lazy" ? "async" : "auto"}
    height={image.height}
    loading={loading}
    src={image.url}
    width={image.width}
/>
